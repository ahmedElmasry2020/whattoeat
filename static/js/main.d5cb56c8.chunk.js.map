{"version":3,"sources":["components/Recipe/recipe.module.scss","components/Pagination/pagination.module.scss","components/Loader/loader.module.scss","components/Empty/empty.module.scss","assets/not-found.png","assets/plates-four.png","components/Recipe/recipe.js","components/Pagination/pagination.js","components/Loader/loader.js","components/Empty/empty.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Recipe","title","img","calories","url","diet","className","styles","recipe","href","target","rel","image","src","alt","info","content","split","splice","join","diet_type","toFixed","Pagination","recipesPerPage","totalRecipes","paginate","pageNumbers","i","Math","ceil","push","pagination","map","number","onClick","page_link","key","page_number","Loader","loader","Empty","ingredient","empty","notFound","App","useState","listRecipes","setListRecipes","ingredientSearch","setIngredientSearch","ingredientQuery","setIngredientQuery","loading","setLoading","currentPage","setCurrentPage","getRecipes","a","fetch","response","json","data","hits","useEffect","indexOfLastRecipe","indexOfFirstRecipe","currentRecipe","slice","onSubmit","e","preventDefault","alert","style","marginTop","width","color","type","value","placeholder","onChange","id","descriptionImg","length","item","uri","label","dietLabels","pageNumber","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5cb56c8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"recipe\":\"recipe_recipe__1NPZY\",\"image\":\"recipe_image__3-IeK\",\"info\":\"recipe_info__pb8b0\",\"content\":\"recipe_content__3ALHF\",\"title\":\"recipe_title__1AnmH\",\"diet_type\":\"recipe_diet_type__21fHH\",\"calories\":\"recipe_calories__2sn5N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pagination\":\"pagination_pagination__3iiHG\",\"page_number\":\"pagination_page_number__2Uckh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"loader_loader__2sbTU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"empty\":\"empty_empty__3rAWm\"};","module.exports = __webpack_public_path__ + \"static/media/not-found.6f454a65.png\";","module.exports = __webpack_public_path__ + \"static/media/plates-four.5b15ff76.png\";","import React from \"react\";\nimport styles from \"./recipe.module.scss\";\n\nconst Recipe = ({ title, img, calories, url, diet }) => {\n    return (\n        <div className={styles.recipe}>\n            <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n                <div className={styles.image}>\n                    <img src={img} alt={title} />\n                </div>\n                <div className={styles.info}>\n                    <div className={styles.content}>\n                        <h2 className={styles.title}>{title.split(' ').splice(0, 3).join(' ')}</h2>\n                        <h4 className={styles.diet_type}>{diet} Diet</h4>\n                        <h4 className={styles.calories}>{calories.toFixed(1)} Calories</h4>\n                    </div>\n                </div>\n            </a>\n        </div>\n    );\n};\n\nexport default Recipe;\n","import React from \"react\";\nimport styles from \"./pagination.module.scss\";\n\nconst Pagination = ({ recipesPerPage, totalRecipes, paginate }) => {\n    const pageNumbers = [];\n\n    for (let i = 1; i <= Math.ceil(totalRecipes / recipesPerPage); i++) {\n        pageNumbers.push(i);\n    }\n\n    return (\n        <div className={styles.pagination}>\n            <ul>\n                {pageNumbers.map(number => (\n                    <button\n                        onClick={() => paginate(number)}\n                        className={styles.page_link}\n                        key={number}\n                    >\n                        <li key={number} className={styles.page_number}>{number}</li>\n                    </button>\n                ))}\n            </ul>\n        </div>\n    );\n};\n\nexport default Pagination;\n","import React from 'react';\nimport styles from './loader.module.scss';\n\nconst Loader = () => {\n    return (\n        <div className={styles.loader}>\n            <p>Loading...</p>\n            <div></div>\n            <div></div>\n        </div>\n    )\n}\n\nexport default Loader;\n","import React from 'react';\nimport styles from './empty.module.scss';\nimport notFound from '../../assets/not-found.png';\n\nconst Empty = ({ingredient}) => {\n    return (\n        <div className={styles.empty}>\n            <h2>No Results for <span className=\"bold\">{ingredient}</span></h2>\n            <p>Did you write your ingredients correctly?</p>\n            <img src={notFound} alt=\"Recipes Not Found\"/>\n        </div>\n    )\n}\n\nexport default Empty;\n\n","import React, { useState, useEffect } from \"react\";\nimport Recipe from \"./components/Recipe\";\nimport Pagination from \"./components/Pagination\";\nimport Loader from \"./components/Loader\";\nimport Empty from \"./components/Empty\";\nimport \"./App.scss\";\nimport { FaSearch, FaHome } from \"react-icons/fa\";\nimport { MdKeyboardArrowRight as Arrow } from \"react-icons/md\";\nimport descriptionImg from \"./assets/plates-four.png\";\n\nconst App = () => {\n    const API_ID = \"4f1cc37c\";\n    const API_KEY = \"1a57ab607d519f5d916aa022f1a51fae\";\n\n    const [listRecipes, setListRecipes] = useState([]);\n    const [ingredientSearch, setIngredientSearch] = useState(\"\");\n    const [ingredientQuery, setIngredientQuery] = useState(\"\");\n    const [loading, setLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [recipesPerPage] = useState(12);\n\n    const getRecipes = async () => {\n        setLoading(true);\n        const response = await fetch(\n            `https://api.edamam.com/search?q=${ingredientQuery}&to=100&app_id=${API_ID}&app_key=${API_KEY}`\n        );\n        const data = await response.json();\n        setListRecipes(data.hits);\n        setLoading(false);\n    };\n\n    const getDataSearch = e => {\n        e.preventDefault();\n        setIngredientQuery(ingredientSearch);\n        if (ingredientSearch === \"\") {\n            alert(\"Please enter at least ONE ingredient\");\n        }\n        setIngredientSearch(\"\");\n    };\n\n    useEffect(() => {\n        getRecipes();\n    }, [ingredientQuery]);\n\n    const getSuggestion = () => {\n        setIngredientQuery(\"suggestions\");\n    };\n\n    const backHome = () => {\n        setIngredientQuery(\"\");\n    };\n\n    const indexOfLastRecipe = currentPage * recipesPerPage;\n    const indexOfFirstRecipe = indexOfLastRecipe - recipesPerPage;\n    const currentRecipe = listRecipes.slice(\n        indexOfFirstRecipe,\n        indexOfLastRecipe\n    );\n\n    const paginate = pageNumber => {\n        setCurrentPage(pageNumber);\n    };\n\n    return (\n        <div className=\"App\">\n            <header>\n                <div className=\"wrapper\">\n                    <div className=\"search-form\">\n                        <form onSubmit={getDataSearch}>\n                            <div className=\"form-input\">\n                                <FaSearch\n                                    style={{\n                                        marginTop: \"3px\",\n                                        width: \"100%\",\n                                        color: \"#fec989\"\n                                    }}\n                                />\n                                <input\n                                    type=\"text\"\n                                    value={ingredientSearch}\n                                    placeholder=\"Enter your ingredient(s)\"\n                                    onChange={e =>\n                                        setIngredientSearch(e.target.value)\n                                    }\n                                />\n                                <button type=\"submit\">Search</button>\n                            </div>\n                            \n                        </form>\n                    </div>\n                    <div className=\"suggestions\">\n                        <button onClick={getSuggestion}>Suggestions</button>\n                    </div>\n                </div>\n            </header>\n\n            {loading ? (\n                <Loader />\n            ) : (\n                <div>\n                    {ingredientQuery === \"\" ? (\n                        <div id=\"description\" className=\"wrapper\">\n                            <div className=\"description-img\">\n                                <img src={descriptionImg} alt=\"Food Plates\" />\n                            </div>\n                            <div className=\"description-text\">\n                                <h1>What To Eat</h1>\n                                <h3>Don't know what to eat today?</h3>\n                                <ul>\n                                    <li>\n                                        <Arrow style={{ color: \"#f05a28\" }} />\n                                        Enter your ingredient(s)\n                                    </li>\n                                    <li>\n                                        <Arrow style={{ color: \"#f05a28\" }} />\n                                        Find out your next delicious meal\n                                    </li>\n                                </ul>\n                            </div>\n                        </div>\n                    ) : (\n                        <div className=\"wrapper\">\n                            {listRecipes.length === 0 ? ( \n                                <Empty ingredient={ingredientQuery}/> \n                            ) : (\n                                <div id=\"recipes\">\n                                    <div className=\"search-info\">\n                                        <p>\n                                            Searching for{\" \"}\n                                            <span className=\"bold\">\n                                                {ingredientQuery}\n                                            </span>{\" \"}\n                                            recipes\n                                        </p>\n                                    </div>\n                                    <div className=\"list-recipes\">\n                                        {currentRecipe.map(item => (\n                                            <Recipe\n                                                key={item.recipe.uri}\n                                                img={item.recipe.image}\n                                                title={item.recipe.label}\n                                                calories={item.recipe.calories}\n                                                diet={item.recipe.dietLabels}\n                                                url={item.recipe.url}\n                                            />\n                                        ))}\n                                    </div>\n                                    <div className=\"pagination-container\">\n                                        <Pagination\n                                            recipesPerPage={recipesPerPage}\n                                            totalRecipes={listRecipes.length}\n                                            paginate={paginate}\n                                        />\n                                    </div>\n                                </div>\n                            )}\n                        </div>\n                    )}\n                </div>\n            )}\n            \n            <footer>\n                <div className=\"footer-content wrapper\">\n                    <div className=\"copyright\">\n                        <p>© 2019 - Alexandre Salsinha</p>\n                    </div>\n                    <div className=\"back-home\">\n                        <button onClick={backHome}><FaHome style={{color: \"#f05a28\"}}/></button>\n                    </div>\n                </div>\n            </footer>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}